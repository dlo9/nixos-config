#!/bin/sh

set -e

usage() {
  echo "create-host-config <hostname> <admin username> <zfs password> <description>"
}

hostname="$1"
admin="$2"
zfsKey="$3"
description="$4"
installerHost="$(hostname)"

if [ -z "$hostname" ] || [ -z "$admin" ] || [ -z "$zfsKey" ] || [ -z "$description" ]; then
  usage
  exit 1
fi

if [ -z "$SOPS_AGE_KEY" ]; then
  echo "ERROR: SOPS_AGE_KEY must be set to the master key"
  exit 1
fi

repoDir="/etc/nixos"
hostDir="$repoDir/hosts/$hostname"
mkdir -p "$hostDir"

##########################
### Secrets Generation ###
##########################

# Change to temp dir for SSH key generation
tempDir="$(mktemp -d)"

ssh-keygen -N '' -t rsa -C "root@$hostname" -f "$tempDir/host_rsa" > /dev/null
sshHostRsaPrivate="$(cat "$tempDir/host_rsa")"
sshHostRsaPublic="$(cat "$tempDir/host_rsa.pub")"

ssh-keygen -N '' -t ed25519 -C "root@$hostname" -f "$tempDir/host_ed25519" > /dev/null
sshHostPrivate="$(cat "$tempDir/host_ed25519")"
sshHostPublic="$(cat "$tempDir/host_ed25519.pub")"

ssh-keygen -N '' -t ed25519 -C "$admin@$hostname" -f "$tempDir/admin_ed25519" > /dev/null
sshAdminPrivate="$(cat "$tempDir/admin_ed25519")"
sshAdminPublic="$(cat "$tempDir/admin_ed25519.pub")"

ageKey="$(age-keygen 2> /dev/null)"
ageKeyCreated="$(echo "$ageKey" | awk 'NR == 1 {print $3}')"
ageKeyPublic="$(echo "$ageKey" | awk 'NR == 2 {print $4}')"
ageKeyPrivate="$(echo "$ageKey" | awk 'NR == 3 {print $1}')"

# Cleanup
rm -rf "$tempDir"

###############
### Exports ###
###############

cat << EOF > "$hostDir/exports.nix"
{
  ssh-keys = {
    host = {
      ed25519 = "$sshHostPublic";
      rsa = "$sshHostRsaPublic";
    };

    $admin = {
      ed25519 = "$sshAdminPublic";
    };
  };
}
EOF

###############
### Secrets ###
###############

# Add private age key to sops
sops --set "[\"$hostname\"] {\"meta\": { \"description\": \"$description\", \"created\": \"$ageKeyCreated\", \"public key\": \"$ageKeyPublic\"}, \"private\": \"$ageKeyPrivate\"}" "$repoDir/sys/secrets/age-keys.yaml"

# Add public age key to sops
creationRules="$(cat "$repoDir/.sops.yaml")"
printf "%s" "$creationRules" | awk "/Host root keys/ { inHostKeys=1 } inHostKeys && /^\$/ { print \"  - &$hostname $ageKeyPublic\"; inHostKeys=0 }  { print }" > "$repoDir/.sops.yaml"

# Add host secrets file to sops
cat << EOF >> "$repoDir/.sops.yaml"

  - path_regex: ^hosts/$hostname/secrets.yaml\$
    unencrypted_regex: ^(meta|.*_unencrypted|.*\.pub)\$
    key_groups:
    - age:
      - *bitwarden
      - *$hostname
EOF

# Update shared keys file
printf 'y\n' | sops updatekeys "$repoDir/sys/secrets/shared.yaml" > /dev/null 2>&1

# Create host secrets
cat << EOF >> "$hostDir/secrets.yaml"
ssh-keys:
  host:
    ed25519: |
      $(echo "$sshHostPrivate" | sed '1b; s/^/      /')
    rsa: |
      $(echo "$sshHostRsaPrivate" | sed '1b; s/^/      /')
  $admin:
    ed25519: |
      $(echo "$sshAdminPrivate" | sed '1b; s/^/      /')
EOF

sops -e -i "$hostDir/secrets.yaml"

# Add installer secrets file to sops
cat << EOF >> "$repoDir/.sops.yaml"

  - path_regex: ^hosts/$hostname/install.secrets.yaml\$
    unencrypted_regex: ^(meta|.*_unencrypted|.*\.pub)\$
    key_groups:
    - age:
      - *bitwarden
      - *$hostname
      - *$installerHost
EOF

# Create installer secrets
cat << EOF >> "$hostDir/install.secrets.yaml"
zfs-key: $zfsKey
sops-key: $ageKeyPrivate
EOF

###########################
### Hardware Generation ###
###########################

#"$repoDir/hosts/generate-hardware-config.sh" / "$hostname"
git add -u
git add "hosts/$hostname"
git commit -m "Add host: $hostname"
#!/usr/bin/env -S expect -f

###################
##### Prelude #####
###################

# Include library functions and set a log file
source lib.exp
log_file vm.log

######################
##### Parameters #####
######################

source inputs.exp
requireVars diskTargetDir diskFiles

#####################
##### Functions #####
#####################

#################
##### Start #####
#################

_info "Cloning VM disks..."
#file delete -force $diskTargetDir
file mkdir $diskTargetDir
# spawn rsync -a --progress --delete {*}$diskFiles $diskTargetDir
# expect -timeout 120 eof
# foreach disk $diskFiles {
#     spawn qemu-img dd if=$disk of=$diskTargetDir/[file tail $disk]
#     expect -timeout 120 eof
# }
#file copy {*}$diskFiles $diskTargetDir

_info "Booting installed VM..."
set qemuArgs [subst {
  -m $mem
  -cpu host
  -smp $coreCount
  -nic "user,hostfwd=tcp::$hostInstalledSshPort-:22"
}]
#-nographic
#-vga virtio

# foreach disk $diskFiles {
#   set disk [file tail $diskFiles]
#   #lappend qemuArgs -drive "file=$diskTargetDir/$disk,format=qcow2"
#   #lappend qemuArgs -drive "file=$disk,format=qcow2"
#   lappend qemuArgs -drive "file=$stateDir/$disk,format=qcow2"
# }

foreach disk $diskFiles {
    set disk [file tail $disk]
    #lappend qemuArgs -drive "file=$stateDir/$disk,format=qcow2,if=virtio,cache=none"
    lappend qemuArgs -drive "file=$stateDir/$disk,format=qcow2"
}

if { bool($uefi) } {
  # TODO: find uefi bios
  set uefiBios ""
  lappend qemuArgs -bios "$uefiBios"
}

# Boot the VM
puts "qemu-kvm [join $qemuArgs]"
spawn qemu-kvm {*}$qemuArgs
expect -timeout -1 eof

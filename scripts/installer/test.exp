#!/usr/bin/env -S expect -f

# This is an interactive script to test the partitioning and
# installer scripts in a VM before I try them on a real host.
#
# This script:
#   - Asks the user for basic test parameters
#   - Creates disks to attach to the VM
#   - Downloads the Nix 22.05 minimal installer ISO
#   - Boots the VM
#   - Copies partitioner and installer scripts
#   - Executes the partitioner and installer

###################
##### Prelude #####
###################

# Include library functions and set a log file
source lib.exp
log_file test.log

# Sleep causes console VM display output to pause at weird points since
# display changes may not have been completely flushed. Instead of completely
# pausing the process during sleep, this function waits instead, allowing display
# output to run normally
proc qsleep {secs} {
	  interact timeout $secs return
}

######################
##### Parameters #####
######################

# User-configurable options
source inputs.exp
requireVars mem uefi diskCount diskSize hostSshPort stateDir nixosVersion isoUrl iso diskFiles coreCount

##############################
##### Download installer #####
##############################

if [file exists $iso] {
  _info "Using existing installer $iso"
} else {
  _info "Downloading installer $isoUrl to $iso"
  file mkdir [file dirname $iso]
  spawn curl -L -o $iso $isoUrl

  # Wait for the download to start
  expect "% Total"

  # Wait for the download to finish
  expect -timeout 120 {
    default {
      _error "Download failed"
      exit 1
    }

    eof {
      success "Download complete"
    }
  }
}

########################
##### Create disks #####
########################

foreach disk $diskFiles {
  if { ! [file exists $disk] } {
    _info "Creating disk $disk with size $diskSize..."
    spawn qemu-img create -f qcow2 $disk $diskSize
    expect eof
  }
}

###################
##### Boot VM #####
###################

_info "Booting installer VM..."
set qemuArgs [subst {
  -m $mem
  -nographic
  -cdrom $iso
  -boot d
  -cpu host
  -smp $coreCount
  -nic "user,hostfwd=tcp::$hostSshPort-:22"
}]

foreach disk $diskFiles {
  lappend qemuArgs -drive "file=$disk,format=qcow2,if=virtio,cache=none"
}

if { bool($uefi) } {
  # TODO: find uefi bios
  set uefiBios ""
  lappend qemuArgs -bios "$uefiBios"
}

# Boot the VM
puts "qemu-kvm [join $qemuArgs]"
spawn qemu-kvm {*}$qemuArgs
set qemuId $spawn_id

# Wait for grub, then select the right menu entry
expect {
  # Bios
  "Automatic boot in" {
    # Go down four lines to the serial console entry
    send [string repeat $down 4]
    expect "(serial console=ttyS0"
  }

  # EFI
  "will be executed automatically in" {

    # Select submenu
    send [string repeat $down 4]
    expect "*HiDPI, Quirks and Accessibility"
    qsleep 1
    send "\r"

    # Wait for submenu to load
    expect "ESC to return"

    # Select submenu
    send [string repeat $down 10]
    expect "*Serial console=ttyS0"
    qsleep 1
    send "\r"

    # Wait for submenu to load
    expect "ESC to return"
  }
}

# Select menu entry
qsleep 1
send "\r"

# Wait for prompt after boot
expect "<<< NixOS Stage 1 >>>"
expect "<<< NixOS Stage 2 >>>"
expect -timeout 60 "Welcome to NixOS"
# Set console size
stty rows 150 cols 200
expectUserPrompt

# Set password for easy SSH
send "passwd\r"
expect "New password:"
send "nixos\r"
expect "Retype new password:"
send "nixos\r"
expect "password updated successfully"
expectUserPrompt

# Login as root & set password
send "sudo su -"
newRootPrompt
send "passwd\r"
expect "New password:"
send "root\r"
expect "Retype new password:"
send "root\r"
expect "password updated successfully"

########################
##### Copy Scripts #####
########################

qsleep 1
syncInstaller $hostSshPort $configDir
newRootPrompt
send "cd $configDir/scripts/installer"
newRootPrompt

# Reattach to qemu
_info "Returning control to QEMU"
set spawn_id $qemuId
newRootPrompt

###################
##### Install #####
###################

# Do some setup
#send env NIXOS_CONFIG=$PWD/configuration.nix nixos-rebuild test
#interact $ctrlD return
# TODO: detect errors
send "./setup.sh\r"
expectRootPrompt 60

send "./partition.exp\r"
sleep 0.5
noRootPrompt "Finished Partitioning"
expectRootPrompt

send "./install.exp\r"
sleep 0.5
noRootPrompt "Finished Install"
expectRootPrompt

# TODO: snapshot and try booting in a new session
# Send qemu to background first?
# https://wiki.qemu.org/Documentation/CreateSnapshot

#####################
##### Debugging #####
#####################

# Give user control
_info "Giving control to user. Use Ctrl+D to return control"
newRootPrompt
interact $ctrlD return

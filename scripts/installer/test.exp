#!/usr/bin/env -S expect -f

# This is an interactive script to test the partitioning and
# installer scripts in a VM before I try them on a real host.
#
# This script:
#   - Asks the user for basic test parameters
#   - Creates disks to attach to the VM
#   - Downloads the Nix 22.05 minimal installer ISO
#   - Boots the VM
#   - Copies partitioner and installer scripts
#   - Executes the partitioner and installer

###################
##### Prelude #####
###################

# Include library functions and set a log file
source lib.exp
log_file test.log

# Sleep causes console VM display output to pause at weird points since
# display changes may not have been completely flushed. Instead of completely
# pausing the process during sleep, this function waits instead, allowing display
# output to run normally
proc qsleep { secs } {
	  interact timeout $secs return
}

######################
##### Parameters #####
######################

# Defaults for user-configurable options
set mem 2G
set uefi no
set disk_count 2
set disk_size 20G
set host_ssh_port 2222

# TODO: prompt for parameter overrides, extra args
#set extra_args [split $env(extra_args) " "]

# Other
set state_dir "./test-state"

set nixos_version "22.05"
set iso_url "https://channels.nixos.org/nixos-$nixos_version/latest-nixos-minimal-x86_64-linux.iso"
set iso "$state_dir/$nixos_version.iso"

set disks {}
for {set i 0}  {$i < $disk_count} {incr i} {
  lappend disks "$state_dir/disk-$i.qcow2"
}

##############################
##### Download installer #####
##############################

if [file exists $iso] {
  _info "Using existing installer $iso"
} else {
  _info "Downloading installer $iso_url to $iso"
  file mkdir [file dirname $iso]
  spawn curl -L -o $iso $iso_url

  # Wait for the download to start
  expect "% Total"

  # Wait for the download to finish
  expect -timeout 120 {
    default {
      _error "Download failed"
      exit 1
    }

    eof {
      success "Download complete"
    }
  }
}

########################
##### Create disks #####
########################

foreach disk $disks {
  if { ! [file exists $disk] } {
    _info "Creating disk $disk with size $disk_size..."
    spawn qemu-img create -f qcow2 $disk $disk_size
    expect eof
  }
}

###################
##### Boot VM #####
###################

_info "Booting VM..."
set qemu_args [subst {
  -m $mem
  -nographic
  -cdrom $iso
  -nic "user,hostfwd=tcp::$host_ssh_port-:22"
}]

if { bool($uefi) } {
  # TODO: find uefi bios
  set uefi_bios ""
  lappend qemu_args -bios "$uefi_bios"
}

# Boot the VM
puts "qemu-kvm [join $qemu_args]"
spawn qemu-kvm {*}$qemu_args
set qemuId $spawn_id

# Wait for grub, then select the right menu entry
set down "\[B"
expect {
  # Bios
  "Automatic boot in" {
    # Go down four lines to the serial console entry
    send [string repeat $down 4]
    expect "(serial console=ttyS0"
  }

  # EFI
  "will be executed automatically in" {

    # Select submenu
    send [string repeat $down 4]
    expect "*HiDPI, Quirks and Accessibility"
    qsleep 1
    send "\r"

    # Wait for submenu to load
    expect "ESC to return"

    # Select submenu
    send [string repeat $down 10]
    expect "*Serial console=ttyS0"
    qsleep 1
    send "\r"

    # Wait for submenu to load
    expect "ESC to return"
  }
}

# Select menu entry
qsleep 1
send "\r"

# Wait for prompt after boot
expect "<<< NixOS Stage 1 >>>"
expect "<<< NixOS Stage 2 >>>"
expect -timeout 60 "Welcome to NixOS"
# Set console size
stty rows 150 cols 200
expectPrompt

# Set password for easy SSH
send "passwd\r"
expect "New password:"
send "nixos\r"
expect "Retype new password:"
send "nixos\r"
expect "password updated successfully"
expectPrompt

########################
##### Copy Scripts #####
########################

qsleep 1
_info "Copying installer via SCP..."
spawn scp -P $host_ssh_port -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" {*}[glob *.exp] nixos@localhost:/home/nixos
expect -timeout 30 "Password:"
send "nixos\r"
expect {
  "No such file" {
    _error "Failed to SCP installer scripts to the test VM"
    exit 1
  }

  eof
}

# Reattach to qemu
_info "Returning control to QEMU. Use Ctrl+D or normal QEMU commands to exit"
set spawn_id $qemuId
send "\r"

###################
##### Install #####
###################

# Give user control
# Return control with EOF (Ctrl-D) # TODO: Or not?? This doesn't work
set ctrl_d \004
interact $ctrl_d return

#source partition.exp
#source install.exp

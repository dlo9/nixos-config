#!/usr/bin/env -S expect -f
#
# This Expect script was generated by autoexpect on Mon May 30 22:05:29 2022
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set vm_mem $env(vm_mem)
set installer_iso $env(installer_iso)
set bios $env(bios)
set local_ssh_port $env(local_ssh_port)
set extra_args [split $env(extra_args) " "]

set timeout 10
match_max 2000

log_file test.log

# Sleep causes console output to pause at weird points since the
# display changes may not have been completely flushed. This keeps
# the display process running when waiting a designated time
proc sleep {secs} {
  interact timeout $secs return
}

proc expectOrError { expectation } {
  expect {
    timeout { puts "Failed: Encountered timeout at expectation $expectation"; exit 1 }
    $expectation
  }
}

# Create a function that waits for the prompt
proc expectPrompt {} {
  expectOrError "\[nixos@nixos:~\]\$"
}

spawn qemu-kvm \
	-m "$vm_mem" \
	-nographic \
	-cdrom "$installer_iso" \
	-bios "$bios" \
	-nic "user,hostfwd=tcp::$local_ssh_port-:22" {*}$extra_args
set qemuId $spawn_id

# By default, exist on timeout or EOF
expect_after {
    timeout { puts "Failed: Encountered timeout"; exit 1 }
    eof     { puts "Failed: Encountered end-of-file"; exit 1 }
}

# Wait for grub, then select the right menu entry
set down "\[B"
expect {
  # Bios
  "Automatic boot in" {
    # Go down four lines to the serial console entry
    send [string repeat $down 4]
    expect "(serial console=ttyS0"
  }

  # EFI
  "will be executed automatically in" {

    # Select submenu
    send [string repeat $down 4]
    expect "*HiDPI, Quirks and Accessibility"
    sleep 2
    send "\r"

    # Wait for submenu to load
    expect "ESC to return"

    # Select submenu
    send [string repeat $down 10]
    expect "*Serial console=ttyS0"
    sleep 2
    send "\r"

    # Wait for submenu to load
    expect "ESC to return"
  }
}

# Select menu entry
sleep 2
send "\r"

# Wait for prompt after boot
expect "<<< NixOS Stage 1 >>>"
expect "<<< NixOS Stage 2 >>>"
expect -timeout 60 "Welcome to NixOS"
# Set console size
stty rows 150 cols 200
expectPrompt

# Set password
send "passwd\r"
expect "New password:"
send "nixos\r"
expect "Retype new password:"
send "nixos\r"
expect "password updated successfully"
expectPrompt

##########################
##### COPY INSTALLER #####
##########################

send_user "Copying installer via SCP...\r\n"
spawn scp -P 2222 -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -r /etc/nixos/scripts/installer/ nixos@localhost:/home/nixos
expectOrError "Password:"
send "nixos\r"
expectOrError eof

# Reattach to qemu
send_user "Returning control to QEMU\r\n"
set spawn_id $qemuId
send "\r"

# Give user control
# Return control with EOF (Ctrl-D)
interact

##################
##### FINISH #####
##################

# Exit qemu
puts "Expectations fulfilled, exiting now"
send "c"
expect "(qemu) "
send "q\r"
expect eof

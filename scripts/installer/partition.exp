#!/usr/bin/env -S expect -f

# This partitions a disk for encrypted ZFS-on-root EFI and legacy boot
#
# This script:
#   -

###################
##### Prelude #####
###################

# Include library functions and set a log file
source lib.exp
log_file partition.log

######################
##### Parameters #####
######################

# TODO: prompt from user
set disks { "/dev/disk/by-id/ata-QEMU_HARDDISK_QM00001" "/dev/disk/by-id/ata-QEMU_HARDDISK_QM00002" }
set adminUser "david"
set zpoolPassword "password"
set efiSize "500M"
set swapSize "2G"

#####################
##### Functions #####
#####################

# Notify the kernel of partition changes so that commands can see the new partitions
proc refreshDisk {disk} {
  sleep 1
  exec partprobe $disk
  sleep 1
}

# Unmounts disks in every way unsed by this script
# This is mainly useful for resetting the system back to its starting state in case this script needs to be re-run, otherwise errors abound
# proc umount {} {
#     # Unmount any existing EFI mounts
#     # This makes it easier to re-run the script without rebooting
#     puts "Unmounting existing EFI mounts"
#     for {set i 0}  {$i < [llength $disks]} {incr i} {
#       #set disk [lindex $i]
#       set mountPoint "/mnt/boot/efi[$i + 1]"
#       send "umount $mountPoint"
#       expect {
#         rootPrompt
#         "umount: $mountPoint: no mount point specified."
#       }
#     }

#     # Export ZFS pools
#     puts "Exporting ZFS pools"
#     send zpool export -a || true

#     # Turn off swap
#     puts "Disabling swap"
#     foreach disk $disks {
#         send "swapoff ${disk}-part2"
#         expect {
#             "swapoff: /dev/nvme0n1p2: swapoff failed: Invalid argument"
#             rootPrompt
#         }
#     }
# }
proc umountDisk {disk} {
  _info "Unmounting partitons for disk $disk..."
  set partitions [glob -nocomplain "${disk}-part\[1-9\]"]

  # Unmount any existing EFI mounts
  # This makes it easier to re-run the script without rebooting
  foreach partition $partitions {
    spawn umount $partition
    expect {
      "not mounted"
      eof {
        _success "Unmounted partition $partition"
      }
    }
  }
}

# Export ZFS pools
proc exportPools {} {
  _info "Exporting ZFS pools"
  exec zpool export -a
}

# Disable swap for disk
proc disableSwap {disk} {
  set partition "${disk}-part2"
  _info "Disabling swap for $partition..."

  spawn swapoff $partition
  expect {
      "swapoff failed: Invalid argument"
      eof {
        _success "Swap disabled for $partition"
      }
  }
}

# Erase existing filesystem/partition info for a disk
proc eraseDisk {disk} {
  _info "Erasing disk $disk..."

  exec wipefs -a $disk
  _success "Erased disk $disk"

  refreshDisk $disk
}

#################
##### Start #####
#################

requireRoot

foreach disk $disks {
  umountDisk $disk
  disableSwap $disk
}

exportPools

foreach disk $disks {
  eraseDisk $disk
}

###################
##### Cleanup #####
###################

# If EOF then the user exited QEMU, otherwise do it ourselves
# expect -timeout 1 {
#   eof

#   timeout {
#     puts "Expectations fulfilled, exiting now"
#     send "c"
#     expect "(qemu) "
#     send "q\r"
#     exp_continue
#   }
# }

#!/usr/bin/env -S expect -f
#
# This Expect script was generated by autoexpect on Mon May 30 22:05:29 2022
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

############################
##### Default settings #####
############################

set timeout 10
match_max 2000

# By default, exit on timeout or EOF
expect_after {
    timeout { puts "Failed: Encountered timeout"; exit 1 }
    eof     { puts "Failed: Encountered end-of-file"; exit 1 }
}

##############################
##### Special characters #####
##############################

set down "\[B"
set ctrlD \004

#############################
##### Utility functions #####
#############################

# Capture's a command's output into a variable, exiting if the command returns a non-zero
# exit status
proc capture {outVar args} {
  if { $outVar != "_" } {
    upvar $outVar out
  }

  set code [catch {exec {*}$args} out]
	if { $code != 0 } {
		puts "Command exited with code $code: $args"
		exit $code
	}
}

proc expectOrError {expectation} {
	expect {
		timeout {
			_error "Failed: Encountered timeout at expectation $expectation"
			exit 1
		}

		$expectation
	}
}

# Waits for a prompt
proc expectPrompt {user host {cmd_timeout 0} {path_regex ".+"}} {
  if { $cmd_timeout == 0 } {
    global timeout
  } else {
    set timeout $cmd_timeout
  }

  expect {
    timeout {
      _error "Prompt not found for user $user@$host"
    }

    -re [subst -nobackslashes -nocommands {\[.*$user@$host:$path_regex\][$#].* }]
  }

	sleep 0.5
}

# Waits for a user prompt
proc expectUserPrompt {args} {
  expectPrompt "nixos" "nixos" {*}$args
}

# Waits for a root prompt
proc expectRootPrompt {args} {
  expectPrompt "root" "nixos" {*}$args
}

proc newUserPrompt {args} {
  send "\r"
  expectUserPrompt {*}$args
}

proc newRootPrompt {args} {
  send "\r"
  expectRootPrompt {*}$args
}

proc scpInstaller {hostSshPort} {
	_info "Copying installer scripts via SCP..."

  # Connect
	spawn scp -P $hostSshPort -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" {*}[glob -type f *.exp *.sh *.nix] root@localhost:/installer

  # Send password
	expect -timeout 30 "Password:"
	send "root\r"

  # Wait
	expect {
    "No such file" {
      _error "Failed to SCP installer scripts to the test VM"
    }

    eof
	}
}

proc requireRoot {} {
  spawn whoami
  expect -timeout 1 {
    "root"
    default {
      _error "Must be executed as root user"
      exit 1
    }
  }
}

##################
##### Colors #####
##################

set env(TERM) linux
capture black tput setaf 0
capture red tput setaf 1
capture green tput setaf 2
capture yellow tput setaf 3
capture limeYellow tput setaf 190
capture powderBlue tput setaf 153
capture blue tput setaf 4
capture magenta tput setaf 5
capture cyan tput setaf 6
capture white tput setaf 7
capture bright tput bold
capture normal tput sgr0
capture reverse tput smso
capture underline tput smul

proc colorize {color message} {
	global $color normal
	sleep .1
	puts "${normal}[set $color]${message}${normal}"
	sleep .1
}

proc _error {message} {
	colorize red $message
  error "An error was thrown"
}

proc _warn {message} {
	colorize yellow $message
}

proc _info {message} {
	colorize blue $message
}

proc _success {message} {
	colorize green $message
}

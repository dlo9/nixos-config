#!/usr/bin/env -S expect -f
#
# This Expect script was generated by autoexpect on Mon May 30 22:05:29 2022
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing ouexec tput - Some programs produce different ouexec tput each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of ouexec tput
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

############################
##### Default settings #####
############################

set timeout 10
match_max 2000
stty rows 50 cols 200

# By default, exit on timeout or EOF
expect_after {
    timeout { puts "Failed: Encountered timeout"; exit 1 }
    eof     { puts "Failed: Encountered end-of-file"; exit 1 }
}

##############################
##### Special characters #####
##############################

set down "\[B"
set ctrlD \004

#############################
##### Utility functions #####
#############################

proc expectOrError {expectation} {
	expect {
		timeout {
			_error "Failed: Encountered timeout at expectation $expectation"
			exit 1
		}

		$expectation
	}
}

proc getPromptString {user host {path_regex ".+"}} {
  return [subst -nobackslashes -nocommands {\[.*$user@$host:$path_regex\][$#].* }]
}

# Waits for a prompt
proc expectPrompt {user host {cmd_timeout 0} {path_regex ".+"}} {
  if { $cmd_timeout == 0 } {
    global timeout
  } else {
    set timeout $cmd_timeout
  }

  expect {
    timeout {
      _error "Prompt not found for user $user@$host"
    }

    -re [getPromptString $user $host $path_regex]
  }

	sleep 0.5
}

proc clearExpect {} {
  expect -timeout 1 default
}

proc noPrompt {user host shouldBe {timeout -1}} {
  set path_regex ".+"

  expect {
    -re [getPromptString $user $host $path_regex] {
      _error "Prompt found, but expected '$shouldBe'"
    }

    $shouldBe
  }

  # Wait for any other output (probably a prompt), and then clear the expect buffer
	# sleep 0.5
  # clearExpect
}

# Waits for a user prompt
proc expectUserPrompt {args} {
  expectPrompt nixos nixos {*}$args
}

# Waits for a root prompt
proc expectRootPrompt {args} {
  expectPrompt root nixos {*}$args
}

proc noUserPrompt {args} {
  noPrompt nixos nixos {*}$args
}

proc noRootPrompt {args} {
  noPrompt root nixos {*}$args
}

proc newUserPrompt {args} {
  send "\r"
  expectUserPrompt {*}$args
}

proc newRootPrompt {args} {
  send "\r"
  expectRootPrompt {*}$args
}

proc syncInstaller {hostSshPort configDir} {
	_info "Copying installer scripts via SSH..."

  # Connect
	spawn rsync -a --progress --delete -e "ssh -p $hostSshPort -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" --exclude "test-state/" --exclude "*.log" ../../ root@localhost:$configDir/

  # Send password
	expect -timeout 30 "Password:"
	send "root\r"

  # Wait
	expect {
    "No such file" {
      _error "Failed to SCP installer scripts to the test VM"
    }

    eof
	}
}

proc requireUser {requiredUser} {
  set user [exec whoami]
  if { $user != $user } {
    _error "Need user $requiredUser, but found $user"
  }
}

proc requireVars {args} {
  foreach var $args {
    upvar $var $var
    if {! [info exists $var]} {
      _error "Missing required variable $var"
    }
  }
}

##################
##### Colors #####
##################

set env(TERM) linux
set black [exec tput setaf 0]
set black [exec tput setaf 0]
set red [exec tput setaf 1]
set green [exec tput setaf 2]
set yellow [exec tput setaf 3]
set limeYellow [exec tput setaf 190]
set powderBlue [exec tput setaf 153]
set blue [exec tput setaf 4]
set magenta [exec tput setaf 5]
set cyan [exec tput setaf 6]
set white [exec tput setaf 7]
set bright [exec tput bold]
set normal [exec tput sgr0]
set reverse [exec tput smso]
set underline [exec tput smul]

proc colorize {color message} {
	global $color normal
	sleep .1
	puts "${normal}[set $color]${message}${normal}"
	sleep .1
}

proc _error {message} {
	colorize red $message
  error "An error was thrown"
}

proc _warn {message} {
	colorize yellow $message
}

proc _info {message} {
	colorize blue $message
}

proc _success {message} {
	colorize green $message
}
